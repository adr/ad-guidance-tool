// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ModelService is an autogenerated mock type for the ModelService type
type ModelService struct {
	mock.Mock
}

// CreateModel provides a mock function with given fields: modelPath
func (_m *ModelService) CreateModel(modelPath string) error {
	ret := _m.Called(modelPath)

	if len(ret) == 0 {
		panic("no return value specified for CreateModel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(modelPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: modelPath
func (_m *ModelService) Exists(modelPath string) bool {
	ret := _m.Called(modelPath)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(modelPath)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RebuildIndex provides a mock function with given fields: modelPath
func (_m *ModelService) RebuildIndex(modelPath string) error {
	ret := _m.Called(modelPath)

	if len(ret) == 0 {
		panic("no return value specified for RebuildIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(modelPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateDecisionDataCorrectness provides a mock function with given fields: modelPath
func (_m *ModelService) ValidateDecisionDataCorrectness(modelPath string) error {
	ret := _m.Called(modelPath)

	if len(ret) == 0 {
		panic("no return value specified for ValidateDecisionDataCorrectness")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(modelPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateIndexDataCorrectness provides a mock function with given fields: modelPath
func (_m *ModelService) ValidateIndexDataCorrectness(modelPath string) error {
	ret := _m.Called(modelPath)

	if len(ret) == 0 {
		panic("no return value specified for ValidateIndexDataCorrectness")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(modelPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewModelService creates a new instance of ModelService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewModelService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ModelService {
	mock := &ModelService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
